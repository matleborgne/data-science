= Module =
<source lang="python3">
def data_import(srcDataFrame:pd.DataFrame, dataStruct:dict):
    # This module aims to import and concatenate files automatically,
    # from a source DataFrame : one DataFrame per column, concatenate all files in column
    
    # srcDataFrame              : path of source data
    # xlStruct, csvStruct, etc. : dictionnaries - structure you want for the importation
    # If you don't use csv files, just create an empty dictionnary csvStruct = {}
        
    import pandas as pd, os
    dictDf = {}
    
    for colonne in srcDataFrame.columns:
        dictDf[colonne] = pd.DataFrame()
        
        for file in srcDataFrame[colonne].loc[srcDataFrame[colonne].notna()]:
            srcFileType = os.path.splitext(file)[1]
            
            if srcFileType.find('xls') > 0:
                tmpDf = pd.read_excel(\
                    file, \
                    sheet_name=xlStruct['sheet_name'], \
                    header=xlStruct['header'], \
                    skiprows=xlStruct['skiprows'], \
                    index_col=xlStruct['index_col'], \
                    usecols=xlStruct['usecols'], \
                    dtype=object)    
            
            elif srcFileType.find('csv') > 0:
                tmpDf = pd.read_csv(\
                    file, \
                    sep=csvStruct['delimiter'], \
                    encoding=csvStruct['encoding'], \
                    dtype=object)       
                            
            dictDf[colonne] = pd.concat([dictDf[colonne], tmpDf])
        
        dictDf[colonne] = dictDf[colonne].reset_index()
        del dictDf[colonne]['index']
        
    return dictDf
</source>

= Example =

<source lang="python3">
 # Variables
 # https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html
 # Default values here
xlStruct = {'sheet_name':0,   # name of the sheet to import - format 0,1,2 or "Sheet1"
            'header':0,       # row to use as column label
            'skiprows':0,     # ignore the first X rows
            'index_col':None, # column to use as index/row label
            'usecols':None,   # which columns to import (format 'A:X', or 1,2,3...)
            }

 # https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html
csvStruct = {'delimiter':';',           # separator or delimiter in CSV-like file
            'encoding':'iso-8859-1',    # file encoding (utf8, cp1252, iso-8859-1, etc.)
            }

 # Usage
dictDf = data_import(srcDataFrame, xlStruct)

 # Visualization
dictDf['achats'].head()
</source>

<source>
Out[]:
     PieceNum    PieceDate   ValeurUnit   Qte   ValeurTot
0  1007XXXX85     20180101         8,00    10       80,00
1  1007XXXX86     20180101        10,00     7       70,00
2  1007XXXX87     20180101        12,00     5       60,00
3  1007XXXX88     20180101       118,00     1      118,00
4  1007XXXX89     20180101         5,00     5       25,00
</source>


= Explanation =

This module aims to import and concatenate files automatically, from a source DataFrame : one DataFrame per column, concatenate all files in this column.

What it does is :
* '''import modules''' pandas and os ;
* '''create a dictionnary''' of DataFrame, empty for now ;
* '''loop''' through columns of a source DataFrame ;
* '''create an empty DataFrame''' for each column of the source DataFrame ;
* '''loop''' through lignes of this specific source column (one line = one file) ;
* '''determine the extension''' of source file (excel, csv, etc.) ;
* '''import the file''' as a DataFrame, following the option you put in xlStruct, csvStruct, etc. ;
* '''concatenate the DataFrame''' with previous DataFrame from the same source column.


Thus, it needs the following input :
* srcDataFrame, the path of source files previously organized in a coherent DataFrame ;
* dataStruct, the structure you want for your DataFrame, in a dictionnary variable {'settingName':'settingOption'}.
