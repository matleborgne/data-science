= Code =
<source lang="python3">
def data_import(srcDataFrame:pd.DataFrame, dataStruct:dict):
    # This module aims to import and concatenate files automatically,
    # from a source DataFrame : one DataFrame per column, concatenate all files in column
    
    # srcDataFrame              : path of source data
    # xlStruct, csvStruct, etc. : dictionnaries - structure you want for the importation
    # If you don't use csv files, just create an empty dictionnary csvStruct = {}
        
    import pandas as pd, os
    dictDf = {}
    
    for colonne in srcDataFrame.columns:
        dictDf[colonne] = pd.DataFrame()
        
        for file in srcDataFrame[colonne].loc[srcDataFrame[colonne].notna()]:
            srcFileType = os.path.splitext(file)[1]
            
            if srcFileType.find('xls') > 0:
                tmpDf = pd.read_excel(\
                    file, \
                    sheet_name=xlStruct['sheet_name'], \
                    header=xlStruct['header'], \
                    skiprows=xlStruct['skiprows'], \
                    index_col=xlStruct['index_col'], \
                    usecols=xlStruct['usecols'], \
                    dtype=object)    
            
            elif srcFileType.find('csv') > 0:
                tmpDf = pd.read_csv(\
                    file, \
                    sep=csvStruct['delimiter'], \
                    encoding=csvStruct['encoding'], \
                    dtype=object)       
                            
            dictDf[colonne] = pd.concat([dictDf[colonne], tmpDf])
        
        dictDf[colonne] = dictDf[colonne].reset_index()
        del dictDf[colonne]['index']
        
    return dictDf
</source>

<source>
Out[]:
     PieceNum    PieceDate   ValeurUnit   Qte   ValeurTot
0  1007XXXX85     20180101         8,00    10       80,00
1  1007XXXX86     20180101        10,00     7       70,00
2  1007XXXX87     20180101        12,00     5       60,00
3  1007XXXX88     20180101       118,00     1      118,00
4  1007XXXX89     20180101         5,00     5       25,00
</source>

= Explications =

== Dictionnaire de DataFrames ==

Afin de stocker les différents jeux de données, on crée une variable '''df''' de type '''dictionnaire'''.
Pour rappel, un dictionnaire est un objet qui stocke d'autres objets et les identifie à travers une '''clé''' ou un '''indice'''. <br>
Par exemple :
<source lang="python3">
 # Exemple avec une liste
pneusLis = [4, 2, 3]

 # Exemple avec un dictionnaire
pneusDic = {\
 'voiture':4,\
 'velo':2,\
 'tricycle':3}
</source>

L'avantage du dictionnaire est de pouvoir parcourir de manière '''transparente''' les éléments, par exemple :
<source lang="python3">
 # Obtenir le nombre de pneus d'un vélo
 # ... avec la liste
pneusLis[1]
 
 # ... avec le dictionnaire
pneusDic['velo']
</source>
<source>
Out[]:
2
</source>

Ici, comme on va manipuler un ensemble de jeux de données, qu'on veut effectivement parcourir de manière transparente, on crée un dictionnaire '''df''' (df pour DataFrame). <br>

== Création des DataFrame vides ==

On remplit ensuite le dictionnaire avec les entrées correspondantes aux colonnes de la '''table source'''. <br>
On obtient alors le dictionnaire suivant :
<source lang="python3">
df
</source>
<source>
Out[]:
{'achats': Empty DataFrame     Columns: []     Index: [],
'ventes': Empty DataFrame      Columns: []     Index: []}
</source>

== Importation des données ==

Une double boucle '''for''' parcoure :
* chaque '''colonne''' de la table source, représentant chaque DataFrame final ;
* chaque '''ligne''' de la table source, représentant les fichiers à concaténer.

Trois étapes sont alors réalisées :
* un DataFrame temporaire est créé (dfTEMP), important le fichier de type CSV avec les paramètres choisis durant la phase variables ;
* une concaténation est effectuée sur le DataFrame contenu dans le dictionnaire ;
* le numéro d'index est réinitialisé (ce qui a pour effet de créer une colonne index dans le jeu de données, qu'il convient alors de supprimer).

Il est important de réinitialiser l'index si l'on veut travailler avec. Sinon, l'appel à un numéro d'index retournera plusieurs résultats, chaque fichier source ayant sa propre ligne numérotée ainsi :
<source lang="python3">
 # Exemple d'affichage de la 4e ligne -> index 3
df['achats'].loc[3]
</source>
<source>
Out[]:
     PieceNum    PieceDate   ValeurUnit   Qte   ValeurTot
3  1007XXXX88     20180101       118,00     1      118,00
3  1008XXXX05     20180701        20,00     4       80,00
</source>
