= Module =
<source lang="python3">
def data_import(srcData:pd.DataFrame, dataStruct:dict, customStruct={}):
    # This module aims to import and concatenate files automatically,
    # from a source DataFrame : one DataFrame per column, concatenate all files in column
    
    # srcDataFrame              : path of source data
    # xlStruct, csvStruct, etc. : dictionnaries - structure you want for the importation
    # If you don't use csv files, just create an empty dictionnary csvStruct = {}
    # With customFormat, you can specify to import, for instance, a .txt file as a csv.
        
    import pandas as pd, os
    dictDf = {}
    
    
    # Manage the case where you import something else than a DataFrame
    if type(srcData) == pd.Series:
        srcData = pd.DataFrame(srcData)
    elif type(srcData) == str:
        srcFileName = srcData.replace('\\', '/').split('/')[-1]
        srcColumnName = os.path.splitext(srcFileName)[0]
        srcData = pd.DataFrame({srcColumnName:[srcData]})
    
    
    for column in srcData.columns:
        dictDf[column] = pd.DataFrame()
    
        for file in srcData[column].loc[srcData[column].notna()]:
            tmpDf = pd.DataFrame()
            srcFileExt = os.path.splitext(file)[1]
            
            # Apply any custom extension according to file extension
            # Ex : .txt to import like a .csv file
            if type(customStruct) == dict:
                try:
                    customStruct[srcFileExt]
                except KeyError:
                    srcExt = srcFileExt
                else:
                    srcExt = customStruct[srcFileExt]
            elif type(customStruct) == str:
                srcExt = customStruct
            
            
            # Importation in itself, with custom parameters
            # Modify the parameters in your dictionnaries variables, not here
            if srcExt.find('xls') >= 0:
                xlStruct = dataStruct
                tmpDf = pd.read_excel(\
                    file, \
                    sheet_name=xlStruct['sheet_name'], \
                    header=xlStruct['header'], \
                    skiprows=xlStruct['skiprows'], \
                    index_col=xlStruct['index_col'], \
                    usecols=xlStruct['usecols'], \
                    dtype=object)    
            
            elif srcExt.find('csv') >= 0:
                csvStruct = dataStruct
                tmpDf = pd.read_csv(\
                    file, \
                    sep=csvStruct['delimiter'], \
                    encoding=csvStruct['encoding'], \
                    header=csvStruct['header'], \
                    dtype=object)       

            elif srcExt.find('txt') >= 0:
                txtStruct = dataStruct
                tmpDf = pd.read_csv(\
                    file, \
                    sep=txtStruct['delimiter'], \
                    encoding=txtStruct['encoding'], \
                    header=txtStruct['header'], \
                    dtype=object)    

            dictDf[column] = pd.concat([dictDf[column], tmpDf])
        
        dictDf[column] = dictDf[column].reset_index()
        del dictDf[column]['index']
        
    return dictDf
</source>

= Example =

<source lang="python3">
 ##### First example : importation from source DataFrame with concatenation

 ### Variables
 # https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html
 # Default values here
xlStruct = {'sheet_name':0,   # name of the sheet to import - format 0,1,2 or "Sheet1"
            'header':0,       # row to use as column label
            'skiprows':0,     # ignore the first X rows
            'index_col':None, # column to use as index/row label
            'usecols':None,   # which columns to import (format 'A:X', or 1,2,3...)
            }

 # https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html
csvStruct = {'delimiter':'|',  # separator or delimiter in CSV-like file
            'encoding':'utf8', # file encoding (utf8, cp1252, iso-8859-1, etc.)
            'header':[1,2]     # row to use as column label (default = 'infer')
            }

 ### Usage
dictDf = data_import(srcDataFrame, xlStruct)

 ### Visualization
dictDf['achats'].head()
</source>

<source>
Out[]:
     PieceNum    PieceDate   ValeurUnit   Qte   ValeurTot
0  1007XXXX85     20180101         8,00    10       80,00
1  1007XXXX86     20180101        10,00     7       70,00
2  1007XXXX87     20180101        12,00     5       60,00
3  1007XXXX88     20180101       118,00     1      118,00
4  1007XXXX89     20180101         5,00     5       25,00
</source>

<source lang="python3">
 ##### Second example : importation with custom file structure

 ### Variable for custom importation => .txt files will be treated as .csv
customStruct = {'txt':'csv',
                'del':'csv',
                }

 ### I want to import one specific .TXT file with .CSV structure (delimited, labeled, etc.)
 
 # First method : with customStruct dictionnary, the most versatile
df = data_import(./myFile.txt, csvStruct, customStruct)

 # Second method : with string directly in the function, the simpler
df = data_import(./myFile.txt, csvStruct, 'csv')

 ### Visualization
df['myFile'].head()
</source>

= Explanation =

This module aims to import and concatenate files automatically, from a source DataFrame : one DataFrame per column, concatenate all files in this column.

What it does is :
* '''import modules''' pandas and os ;
* '''create a dictionnary''' of DataFrame, empty for now ;
* '''loop''' through columns of a source DataFrame ;
* '''create an empty DataFrame''' for each column of the source DataFrame ;
* '''loop''' through lines of this specific source column (one line = one file) ;
* '''determine the extension''' of source file (excel, csv, etc.) ;
* '''import the file''' as a DataFrame, following the option you put in xlStruct, csvStruct, etc. ;
* '''concatenate the DataFrame''' with previous DataFrame from the same source column.


Thus, it needs the following input :
* srcDataFrame, the path of source files previously organized in a coherent DataFrame ;
* dataStruct, the structure you want for your DataFrame, in a dictionnary variable {'settingName':'settingOption'} ;
* customStruct, if you want to import files without automatic detection of the extension (xls, csv, txt, etc.)
